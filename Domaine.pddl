(define (domain rubiks-cube)
  (:requirements :strips :equality :negative-preconditions)
  (:predicates
    (at ?x ?pos - position)
    (is ?x ?color - color)
    (face-up ?pos - position)
    (face-down ?pos - position)
    (face-front ?pos - position)
    (face-back ?pos - position)
    (face-left ?pos - position)
    (face-right ?pos - position)
    (adjacent ?pos1 ?pos2 - position)
    (solved))
  (:action turn-up
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-up ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-up ?p) (is ?x ?color)))
  (:action turn-down
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-down ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-down ?p) (is ?x ?color)))
  (:action turn-front
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-front ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-front ?p) (is ?x ?color)))
  (:action turn-back
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-back ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-back ?p) (is ?x ?color)))
  (:action turn-left
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-left ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-left ?p) (is ?x ?color)))
  (:action turn-right
    :parameters (?p - position)
    :precondition (and (at ?x ?p) (face-right ?p) (is ?x ?color))
    :effect (and (at ?x ?p) (face-right ?p) (is ?x ?color)))
  (:action rotate-up
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-up ?p1) (face-up ?p2) (face-up ?p3) (face-up ?p4))
    :effect (and (not (face-up ?p1)) (not (face-up ?p2)) (not (face-up ?p3)) (not (face-up ?p4))
                  (face-front ?p1) (face-right ?p2) (face-back ?p3) (face-left ?p4)))
  (:action rotate-down
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-down ?p1) (face-down ?p2) (face-down ?p3) (face-down ?p4))
    :effect (and (not (face-down ?p1)) (not (face-down ?p2)) (not (face-down ?p3)) (not (face-down ?p4))
    (face-front ?p3) (face-left ?p2) (face-back ?p1) (face-right ?p4)))
  (:action rotate-left
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-left ?p1) (face-left ?p2) (face-left ?p3) (face-left ?p4))
    :effect (and (not (face-left ?p1)) (not (face-left ?p2)) (not (face-left ?p3)) (not (face-left ?p4))
    (face-front ?p4) (face-up ?p2) (face-back ?p1) (face-down ?p3)))
  (:action rotate-right
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-right ?p1) (face-right ?p2) (face-right ?p3) (face-right ?p4))
    :effect (and (not (face-right ?p1)) (not (face-right ?p2)) (not (face-right ?p3)) (not (face-right ?p4))
    (face-front ?p2) (face-down ?p1) (face-back ?p3) (face-up ?p4)))
  (:action rotate-front
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-front ?p1) (face-front ?p2) (face-front ?p3) (face-front ?p4))
    :effect (and (not (face-front ?p1)) (not (face-front ?p2)) (not (face-front ?p3)) (not (face-front ?p4))
    (face-up ?p3) (face-left ?p2) (face-down ?p1) (face-right ?p4)))
  (:action rotate-back
    :parameters (?p1 ?p2 ?p3 ?p4 - position)
    :precondition (and (face-back ?p1) (face-back ?p2) (face-back ?p3) (face-back ?p4))
    :effect (and (not (face-back ?p1)) (not (face-back ?p2)) (not (face-back ?p3)) (not (face-back ?p4))
    (face-up ?p1) (face-right ?p2) (face-down ?p3) (face-left ?p4)))
  (:action solve-cube
    :precondition (and
    (at cube-pos1 pos1) (is cube-pos1 color1)
    (at cube-pos2 pos2) (is cube-pos2 color1)
    (at cube-pos3 pos3) (is cube-pos3 color1)
    (at cube-pos4 pos4) (is cube-pos4 color1)
    (at cube-pos5 pos5) (is cube-pos5 color2)
    (at cube-pos6 pos6) (is cube-pos6 color2)
    (at cube-pos7 pos7) (is cube-pos7 color2)
    (at cube-pos8 pos8) (is cube-pos8 color2)
    (at cube-pos9 pos9) (is cube-pos9 color3)
    (at cube-pos10 pos10) (is cube-pos10 color3)
    (at cube-pos11 pos11) (is cube-pos11 color3)
    (at cube-pos12 pos12) (is cube-pos12 color3)
    (at cube-pos13 pos13) (is cube-pos13 color3)
    (at cube-pos14 pos14) (is cube-pos14 color4)
    (at cube-pos15 pos15) (is cube-pos15 color4)
    (at cube-pos16 pos16) (is cube-pos16 color4)
    (at cube-pos17 pos17) (is cube-pos17 color4)
    (at cube-pos18 pos18) (is cube-pos18 color5)
    (at cube-pos19 pos19) (is cube-pos19 color5)
    (at cube-pos20 pos20) (is cube-pos20 color5)
    (at cube-pos21 pos21) (is cube-pos21 color5)
    (at cube-pos22 pos22) (is cube-pos22 color6)
    (at cube-pos23 pos23) (is cube-pos23 color6)
    (at cube-pos24 pos24) (is cube-pos24 color6)
    (at cube-pos25 pos25) (is cube-pos25 color6))
    :effect (and (solved)))
